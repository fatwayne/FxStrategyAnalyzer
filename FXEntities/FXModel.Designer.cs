//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("FXModel", "FK_InterestRate_Currency", "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FXEntities.Currency), "InterestRate", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FXEntities.InterestRate), true)]
[assembly: EdmRelationshipAttribute("FXModel", "FK_ExchangeRate_Base_Currency", "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FXEntities.Currency), "ExchangeRate", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FXEntities.ExchangeRate), true)]
[assembly: EdmRelationshipAttribute("FXModel", "FK_ExchangeRate_Variable_Currency", "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FXEntities.Currency), "ExchangeRate", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FXEntities.ExchangeRate), true)]

#endregion

namespace FXEntities
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class FXEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new FXEntities object using the connection string found in the 'FXEntities' section of the application configuration file.
        /// </summary>
        public FXEntities() : base("name=FXEntities", "FXEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new FXEntities object.
        /// </summary>
        public FXEntities(string connectionString) : base(connectionString, "FXEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new FXEntities object.
        /// </summary>
        public FXEntities(EntityConnection connection) : base(connection, "FXEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Currency> Currencies
        {
            get
            {
                if ((_Currencies == null))
                {
                    _Currencies = base.CreateObjectSet<Currency>("Currencies");
                }
                return _Currencies;
            }
        }
        private ObjectSet<Currency> _Currencies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<InterestRate> InterestRates
        {
            get
            {
                if ((_InterestRates == null))
                {
                    _InterestRates = base.CreateObjectSet<InterestRate>("InterestRates");
                }
                return _InterestRates;
            }
        }
        private ObjectSet<InterestRate> _InterestRates;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ExchangeRate> ExchangeRates
        {
            get
            {
                if ((_ExchangeRates == null))
                {
                    _ExchangeRates = base.CreateObjectSet<ExchangeRate>("ExchangeRates");
                }
                return _ExchangeRates;
            }
        }
        private ObjectSet<ExchangeRate> _ExchangeRates;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Currencies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCurrencies(Currency currency)
        {
            base.AddObject("Currencies", currency);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the InterestRates EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInterestRates(InterestRate interestRate)
        {
            base.AddObject("InterestRates", interestRate);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ExchangeRates EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToExchangeRates(ExchangeRate exchangeRate)
        {
            base.AddObject("ExchangeRates", exchangeRate);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FXModel", Name="Currency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Currency : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Currency object.
        /// </summary>
        /// <param name="currencyCode">Initial value of the CurrencyCode property.</param>
        public static Currency CreateCurrency(global::System.String currencyCode)
        {
            Currency currency = new Currency();
            currency.CurrencyCode = currencyCode;
            return currency;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CurrencyCode
        {
            get
            {
                return _CurrencyCode;
            }
            set
            {
                if (_CurrencyCode != value)
                {
                    OnCurrencyCodeChanging(value);
                    ReportPropertyChanging("CurrencyCode");
                    _CurrencyCode = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("CurrencyCode");
                    OnCurrencyCodeChanged();
                }
            }
        }
        private global::System.String _CurrencyCode;
        partial void OnCurrencyCodeChanging(global::System.String value);
        partial void OnCurrencyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CurrencyName
        {
            get
            {
                return _CurrencyName;
            }
            set
            {
                OnCurrencyNameChanging(value);
                ReportPropertyChanging("CurrencyName");
                _CurrencyName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CurrencyName");
                OnCurrencyNameChanged();
            }
        }
        private global::System.String _CurrencyName;
        partial void OnCurrencyNameChanging(global::System.String value);
        partial void OnCurrencyNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FXModel", "FK_InterestRate_Currency", "InterestRate")]
        public EntityCollection<InterestRate> InterestRates
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<InterestRate>("FXModel.FK_InterestRate_Currency", "InterestRate");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<InterestRate>("FXModel.FK_InterestRate_Currency", "InterestRate", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FXModel", "FK_ExchangeRate_Base_Currency", "ExchangeRate")]
        public EntityCollection<ExchangeRate> ExchangeRates
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ExchangeRate>("FXModel.FK_ExchangeRate_Base_Currency", "ExchangeRate");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ExchangeRate>("FXModel.FK_ExchangeRate_Base_Currency", "ExchangeRate", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FXModel", "FK_ExchangeRate_Variable_Currency", "ExchangeRate")]
        public EntityCollection<ExchangeRate> ExchangeRates1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ExchangeRate>("FXModel.FK_ExchangeRate_Variable_Currency", "ExchangeRate");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ExchangeRate>("FXModel.FK_ExchangeRate_Variable_Currency", "ExchangeRate", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FXModel", Name="ExchangeRate")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ExchangeRate : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ExchangeRate object.
        /// </summary>
        /// <param name="date">Initial value of the Date property.</param>
        /// <param name="baseCurrencyCode">Initial value of the BaseCurrencyCode property.</param>
        /// <param name="variableCurrencyCode">Initial value of the VariableCurrencyCode property.</param>
        /// <param name="bidPrice">Initial value of the BidPrice property.</param>
        /// <param name="askPrice">Initial value of the AskPrice property.</param>
        public static ExchangeRate CreateExchangeRate(global::System.DateTime date, global::System.String baseCurrencyCode, global::System.String variableCurrencyCode, global::System.Decimal bidPrice, global::System.Decimal askPrice)
        {
            ExchangeRate exchangeRate = new ExchangeRate();
            exchangeRate.Date = date;
            exchangeRate.BaseCurrencyCode = baseCurrencyCode;
            exchangeRate.VariableCurrencyCode = variableCurrencyCode;
            exchangeRate.BidPrice = bidPrice;
            exchangeRate.AskPrice = askPrice;
            return exchangeRate;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                if (_Date != value)
                {
                    OnDateChanging(value);
                    ReportPropertyChanging("Date");
                    _Date = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Date");
                    OnDateChanged();
                }
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BaseCurrencyCode
        {
            get
            {
                return _BaseCurrencyCode;
            }
            set
            {
                if (_BaseCurrencyCode != value)
                {
                    OnBaseCurrencyCodeChanging(value);
                    ReportPropertyChanging("BaseCurrencyCode");
                    _BaseCurrencyCode = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("BaseCurrencyCode");
                    OnBaseCurrencyCodeChanged();
                }
            }
        }
        private global::System.String _BaseCurrencyCode;
        partial void OnBaseCurrencyCodeChanging(global::System.String value);
        partial void OnBaseCurrencyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String VariableCurrencyCode
        {
            get
            {
                return _VariableCurrencyCode;
            }
            set
            {
                if (_VariableCurrencyCode != value)
                {
                    OnVariableCurrencyCodeChanging(value);
                    ReportPropertyChanging("VariableCurrencyCode");
                    _VariableCurrencyCode = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("VariableCurrencyCode");
                    OnVariableCurrencyCodeChanged();
                }
            }
        }
        private global::System.String _VariableCurrencyCode;
        partial void OnVariableCurrencyCodeChanging(global::System.String value);
        partial void OnVariableCurrencyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal BidPrice
        {
            get
            {
                return _BidPrice;
            }
            set
            {
                OnBidPriceChanging(value);
                ReportPropertyChanging("BidPrice");
                _BidPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BidPrice");
                OnBidPriceChanged();
            }
        }
        private global::System.Decimal _BidPrice;
        partial void OnBidPriceChanging(global::System.Decimal value);
        partial void OnBidPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal AskPrice
        {
            get
            {
                return _AskPrice;
            }
            set
            {
                OnAskPriceChanging(value);
                ReportPropertyChanging("AskPrice");
                _AskPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AskPrice");
                OnAskPriceChanged();
            }
        }
        private global::System.Decimal _AskPrice;
        partial void OnAskPriceChanging(global::System.Decimal value);
        partial void OnAskPriceChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FXModel", "FK_ExchangeRate_Base_Currency", "Currency")]
        public Currency BaseCurrency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("FXModel.FK_ExchangeRate_Base_Currency", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("FXModel.FK_ExchangeRate_Base_Currency", "Currency").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> BaseCurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("FXModel.FK_ExchangeRate_Base_Currency", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("FXModel.FK_ExchangeRate_Base_Currency", "Currency", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FXModel", "FK_ExchangeRate_Variable_Currency", "Currency")]
        public Currency VariableCurrency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("FXModel.FK_ExchangeRate_Variable_Currency", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("FXModel.FK_ExchangeRate_Variable_Currency", "Currency").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> VariableCurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("FXModel.FK_ExchangeRate_Variable_Currency", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("FXModel.FK_ExchangeRate_Variable_Currency", "Currency", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FXModel", Name="InterestRate")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class InterestRate : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new InterestRate object.
        /// </summary>
        /// <param name="currencyCode">Initial value of the CurrencyCode property.</param>
        /// <param name="date">Initial value of the Date property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static InterestRate CreateInterestRate(global::System.String currencyCode, global::System.DateTime date, global::System.Decimal value)
        {
            InterestRate interestRate = new InterestRate();
            interestRate.CurrencyCode = currencyCode;
            interestRate.Date = date;
            interestRate.Value = value;
            return interestRate;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CurrencyCode
        {
            get
            {
                return _CurrencyCode;
            }
            set
            {
                if (_CurrencyCode != value)
                {
                    OnCurrencyCodeChanging(value);
                    ReportPropertyChanging("CurrencyCode");
                    _CurrencyCode = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("CurrencyCode");
                    OnCurrencyCodeChanged();
                }
            }
        }
        private global::System.String _CurrencyCode;
        partial void OnCurrencyCodeChanging(global::System.String value);
        partial void OnCurrencyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                if (_Date != value)
                {
                    OnDateChanging(value);
                    ReportPropertyChanging("Date");
                    _Date = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Date");
                    OnDateChanged();
                }
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Decimal _Value;
        partial void OnValueChanging(global::System.Decimal value);
        partial void OnValueChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FXModel", "FK_InterestRate_Currency", "Currency")]
        public Currency Currency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("FXModel.FK_InterestRate_Currency", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("FXModel.FK_InterestRate_Currency", "Currency").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("FXModel.FK_InterestRate_Currency", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("FXModel.FK_InterestRate_Currency", "Currency", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
